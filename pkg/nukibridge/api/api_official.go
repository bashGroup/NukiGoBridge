/*
 * Keyturner api
 *
 * Keyturner api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"
	"strings"
)

// A OfficialApiController binds http requests to an api service and writes the service results to the http response
type OfficialApiController struct {
	service OfficialApiServicer
}

// NewOfficialApiController creates a default api controller
func NewOfficialApiController(s OfficialApiServicer) Router {
	return &OfficialApiController{service: s}
}

// Routes returns all of the api route for the OfficialApiController
func (c *OfficialApiController) Routes() Routes {
	return Routes{
		{
			"AuthGet",
			strings.ToUpper("Get"),
			"/auth",
			c.AuthGet,
		},
		{
			"CallbackAddGet",
			strings.ToUpper("Get"),
			"/callback/add",
			c.CallbackAddGet,
		},
		{
			"CallbackListGet",
			strings.ToUpper("Get"),
			"/callback/list",
			c.CallbackListGet,
		},
		{
			"CallbackRemoveGet",
			strings.ToUpper("Get"),
			"/callback/remove",
			c.CallbackRemoveGet,
		},
		{
			"ConfigAuthGet",
			strings.ToUpper("Get"),
			"/configAuth",
			c.ConfigAuthGet,
		},
		{
			"ListGet",
			strings.ToUpper("Get"),
			"/list",
			c.ListGet,
		},
		{
			"LockActionGet",
			strings.ToUpper("Get"),
			"/lockAction",
			c.LockActionGet,
		},
		{
			"LockStateGet",
			strings.ToUpper("Get"),
			"/lockState",
			c.LockStateGet,
		},
	}
}

// AuthGet -
func (c *OfficialApiController) AuthGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AuthGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// CallbackAddGet - Registers a new callback url
func (c *OfficialApiController) CallbackAddGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	url := query.Get("url")
	token := query.Get("token")
	result, err := c.service.CallbackAddGet(url, token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// CallbackListGet - Returns all registered url callbacks
func (c *OfficialApiController) CallbackListGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	token := query.Get("token")
	result, err := c.service.CallbackListGet(token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// CallbackRemoveGet - Removes a previously added callback
func (c *OfficialApiController) CallbackRemoveGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	id := query.Get("id")
	token := query.Get("token")
	result, err := c.service.CallbackRemoveGet(id, token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// ConfigAuthGet -
func (c *OfficialApiController) ConfigAuthGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	enable := query.Get("enable")
	token := query.Get("token")
	result, err := c.service.ConfigAuthGet(enable, token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// ListGet -
func (c *OfficialApiController) ListGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	token := query.Get("token")
	result, err := c.service.ListGet(token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// LockActionGet - Performs a lock operation on the given Smart Lock
func (c *OfficialApiController) LockActionGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nukiId := query.Get("nukiId")
	action := query.Get("action")
	noWait := query.Get("noWait")
	token := query.Get("token")
	result, err := c.service.LockActionGet(nukiId, action, noWait, token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// LockStateGet -
func (c *OfficialApiController) LockStateGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nukiId := query.Get("nukiId")
	token := query.Get("token")
	result, err := c.service.LockStateGet(nukiId, token)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, nil, w)
}

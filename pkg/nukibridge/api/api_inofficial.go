/*
 * Keyturner api
 *
 * Keyturner api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A InofficialApiController binds http requests to an api service and writes the service results to the http response
type InofficialApiController struct {
	service InofficialApiServicer
}

// NewInofficialApiController creates a default api controller
func NewInofficialApiController(s InofficialApiServicer) Router {
	return &InofficialApiController{ service: s }
}

// Routes returns all of the api route for the InofficialApiController
func (c *InofficialApiController) Routes() Routes {
	return Routes{ 
		{
			"BridgeConfigGet",
			strings.ToUpper("Get"),
			"/bridge/config",
			c.BridgeConfigGet,
		},
		{
			"BridgeConfigPut",
			strings.ToUpper("Put"),
			"/bridge/config",
			c.BridgeConfigPut,
		},
		{
			"LocksGet",
			strings.ToUpper("Get"),
			"/locks",
			c.LocksGet,
		},
		{
			"LocksIdConfigGet",
			strings.ToUpper("Get"),
			"/locks/{id}/config",
			c.LocksIdConfigGet,
		},
		{
			"LocksIdCurrentStateGet",
			strings.ToUpper("Get"),
			"/locks/{id}/currentState",
			c.LocksIdCurrentStateGet,
		},
		{
			"LocksIdDelete",
			strings.ToUpper("Delete"),
			"/locks/{id}",
			c.LocksIdDelete,
		},
		{
			"LocksIdGet",
			strings.ToUpper("Get"),
			"/locks/{id}",
			c.LocksIdGet,
		},
		{
			"LocksIdHistoryGet",
			strings.ToUpper("Get"),
			"/locks/{id}/history",
			c.LocksIdHistoryGet,
		},
		{
			"LocksIdLastStateGet",
			strings.ToUpper("Get"),
			"/locks/{id}/lastState",
			c.LocksIdLastStateGet,
		},
		{
			"LocksIdPut",
			strings.ToUpper("Put"),
			"/locks/{id}",
			c.LocksIdPut,
		},
	}
}

// BridgeConfigGet - Read the current bridge configuration
func (c *InofficialApiController) BridgeConfigGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.BridgeConfigGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// BridgeConfigPut - Update the current bridge configuration
func (c *InofficialApiController) BridgeConfigPut(w http.ResponseWriter, r *http.Request) { 
	bridgeConfig := &BridgeConfig{}
	if err := json.NewDecoder(r.Body).Decode(&bridgeConfig); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.BridgeConfigPut(*bridgeConfig)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksGet - Returns a list of linked locks
func (c *InofficialApiController) LocksGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.LocksGet()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdConfigGet - Returns the configuration of the lock
func (c *InofficialApiController) LocksIdConfigGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.LocksIdConfigGet(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdCurrentStateGet - Returns the current state of the keyturner
func (c *InofficialApiController) LocksIdCurrentStateGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.LocksIdCurrentStateGet(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdDelete - Update a linked lock
func (c *InofficialApiController) LocksIdDelete(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.LocksIdDelete(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdGet - Returns a linked lock
func (c *InofficialApiController) LocksIdGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.LocksIdGet(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdHistoryGet - Returns the history of log action
func (c *InofficialApiController) LocksIdHistoryGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	id := params["id"]
	offset := query.Get("offset")
	count := query.Get("count")
	result, err := c.service.LocksIdHistoryGet(id, offset, count)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdLastStateGet - Returns the last state of the keyturner without creating a connection
func (c *InofficialApiController) LocksIdLastStateGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.LocksIdLastStateGet(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// LocksIdPut - Update a linked lock
func (c *InofficialApiController) LocksIdPut(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	lock := &Lock{}
	if err := json.NewDecoder(r.Body).Decode(&lock); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.LocksIdPut(id, *lock)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
